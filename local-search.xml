<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Caddy简介与使用指南</title>
    <link href="/2023/03/07/caddy/"/>
    <url>/2023/03/07/caddy/</url>
    
    <content type="html"><![CDATA[<p>Caddy是一个快速、现代化且易于使用的Web服务器，它支持自动化的HTTPS，可轻松配置反向代理和静态文件服务等功能。Caddy是一款基于Go语言开发的服务器，适用于多种操作系统，包括Linux、Mac和Windows等。本文将介绍Caddy在Ubuntu下的安装及常用功能的使用指南。</p><p>官方文档： <a href="https://caddyserver.com/docs/">Caddy官方地址</a>。</p><h2 id="1-安装Caddy"><a href="#1-安装Caddy" class="headerlink" title="1. 安装Caddy"></a>1. 安装Caddy</h2><p><strong>Ubuntu安装</strong></p><pre><code class="hljs">sudo apt install -y debian-keyring debian-archive-keyring apt-transport-httpscurl -1sLf &#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&#39; | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpgcurl -1sLf &#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&#39; | sudo tee /etc/apt/sources.list.d/caddy-stable.listsudo apt updatesudo apt install caddy</code></pre><h2 id="2-Caddy的两种启动方式"><a href="#2-Caddy的两种启动方式" class="headerlink" title="2. Caddy的两种启动方式"></a>2. Caddy的两种启动方式</h2><p>Caddy有两种启动方式：使用JSON格式的配置文件和使用Caddyfile。下面将分别介绍它们的优缺点和使用方法。</p><h3 id="2-1-使用JSON格式的配置文件启动Caddy"><a href="#2-1-使用JSON格式的配置文件启动Caddy" class="headerlink" title="2.1 使用JSON格式的配置文件启动Caddy"></a>2.1 使用JSON格式的配置文件启动Caddy</h3><p>首先写一个Json文件，保存为caddy.json</p><pre><code class="hljs">    &#123;        &quot;apps&quot;: &#123;            &quot;http&quot;: &#123;                &quot;servers&quot;: &#123;                    &quot;example&quot;: &#123;                        &quot;listen&quot;: [&quot;:2015&quot;],                        &quot;routes&quot;: [                            &#123;                                &quot;handle&quot;: [&#123;                                    &quot;handler&quot;: &quot;static_response&quot;,                                    &quot;body&quot;: &quot;Hello, world!&quot;                                &#125;]                            &#125;                        ]                    &#125;                &#125;            &#125;        &#125;    &#125;</code></pre><p>上传json文件</p><pre><code class="hljs">    curl localhost:2019/load \    -H &quot;Content-Type: application/json&quot; \    -d @caddy.json</code></pre><p>使用JSON格式的配置文件的优点是灵活性高，可以通过配置文件实现更复杂的设置。缺点是配置文件语法相对复杂，需要一定的学习成本。</p><h3 id="2-2-使用Caddyfile启动Caddy"><a href="#2-2-使用Caddyfile启动Caddy" class="headerlink" title="2.2 使用Caddyfile启动Caddy"></a>2.2 使用Caddyfile启动Caddy</h3><p>使用Caddyfile启动Caddy非常简单，只需要在命令行中指定要监听的地址和要处理的站点即可。Caddyfile语法类似于Apache的配置文件，易于学习和使用。以下是一个简单的Caddyfile示例：</p><pre><code class="hljs">    :2015    respond &quot;Hello, world!&quot;</code></pre><p>启动caddy</p><pre><code class="hljs">    caddy run --config /path/to/Caddyfile</code></pre><h2 id="3-两种启动方式的优劣对比"><a href="#3-两种启动方式的优劣对比" class="headerlink" title="3. 两种启动方式的优劣对比"></a>3. 两种启动方式的优劣对比</h2><p>使用Caddyfile启动Caddy非常方便，语法简单易懂，适合快速设置和调试。而使用JSON格式的配置文件可以更好地处理复杂的设置，可以编写脚本自动生成配置文件等。</p><p>对于初学者来说，建议使用Caddyfile启动Caddy，等熟悉了Caddy的基本功能后再尝试使用JSON格式的配置文件。<br><img src="/jsonVSfile.png" alt="对比图片" title="Magic Gardens"></p><h2 id="4-API和Config-files的配置"><a href="#4-API和Config-files的配置" class="headerlink" title="4. API和Config files的配置"></a>4. API和Config files的配置</h2><p>API方式通过HTTP请求实现配置更改，可以使用多种编程语言进行交互，并可以实时更改配置。使用API的优点是灵活性高，可以通过程序化方式自动化配置更改，但需要一定的编程知识。此外，API方式易于扩展和集成到自己的工作流中。</p><p>配置文件方式通过CLI命令实现配置更改，使用模板语言进行更高级的操作，如自动化证书管理、路由控制等。配置文件易于理解、共享和备份，可以方便地手动修改。但使用配置文件的缺点是不便于扩展和自动化管理，并且需要一定的命令行使用知识。</p><p>在选择API或配置文件方式时，需要考虑自己的工作流程和需求。API方式适合于需要高度灵活性和自动化管理的场景，而配置文件方式适合于手动管理、易于理解的场景。同时，也可以根据实际需求选择使用JSON或Caddyfile作为配置文件格式。</p><h2 id="5-Caddy反向代理的实现步骤"><a href="#5-Caddy反向代理的实现步骤" class="headerlink" title="5. Caddy反向代理的实现步骤"></a>5. Caddy反向代理的实现步骤</h2><p>Caddy支持反向代理功能，可以将请求转发到其他服务器或服务。以下是实现反向代理的步骤：</p><p>编写Caddyfile或JSON格式的配置文件，指定要反向代理的地址和要代理的站点。<br>启动Caddy，等待代理生效。比如下面的代码就将9000代理到2080。</p><pre><code class="hljs">caddy reverse-proxy --from :2080 --to :9000</code></pre><h2 id="6-Caddy实现HTTPS代理的步骤"><a href="#6-Caddy实现HTTPS代理的步骤" class="headerlink" title="6. Caddy实现HTTPS代理的步骤"></a>6. Caddy实现HTTPS代理的步骤</h2><p>简单的 HTTPS 反向代理命令，实现访问<a href="https://www.example.com/">https://www.example.com</a> -&gt; localhost:9000</p><pre><code class="hljs">caddy reverse-proxy --from example.com --to localhost:9000</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/09/02/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/09/02/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2022/09/02/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg" class="" title="图片引用方法一">]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/02/hello-world/"/>
    <url>/2022/09/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><hr><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
