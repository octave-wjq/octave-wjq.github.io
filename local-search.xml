<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>miniAPP-1</title>
    <link href="/2023/03/10/miniAPP-1/"/>
    <url>/2023/03/10/miniAPP-1/</url>
    
    <content type="html"><![CDATA[<h1 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h1><h2 id="1-小程序项目结构文件"><a href="#1-小程序项目结构文件" class="headerlink" title="1. 小程序项目结构文件"></a>1. 小程序项目结构文件</h2><img src="/2023/03/10/miniAPP-1/file.png" class="" title="项目架构图片"><ol><li>app.js：小程序的入口文件，主要包含了小程序的生命周期函数、全局变量和全局函数等。</li><li>app.json：小程序的全局配置文件，包含了小程序的基本信息、页面路径、窗口配置、导航栏配置等。</li><li>app.wxss：小程序的全局样式文件，包含了小程序的全局样式定义。</li><li>pages：小程序的页面目录，包含了小程序所有的页面文件，每个页面通常由一个.wxml、.js、.wxss和.json文件组成。</li></ol><h3 id="1-1-JSON文件"><a href="#1-1-JSON文件" class="headerlink" title="1.1. JSON文件"></a>1.1. JSON文件</h3><ol><li>页面路由配置：在这个文件中，可以配置当前页面的路由信息，包括页面的路径、页面的名称、页面展示的位置等。在小程序中，每个页面都需要配置对应的路由信息才能够被正确访问。</li><li>窗口配置：在这个文件中，可以配置当前页面的窗口相关的信息，包括导航栏颜色、背景色、是否开启下拉刷新等。通过这个文件，可以对页面的显示效果进行定制。</li><li>生命周期配置：在这个文件中，可以配置当前页面的生命周期相关的信息，包括页面加载、页面显示、页面隐藏、页面卸载等。通过这个文件，可以控制页面在不同的生命周期中执行不同的操作。</li><li>页面配置：在这个文件中，可以配置当前页面的一些基本信息，包括页面标题、页面是否允许分享等。通过这个文件，可以控制页面的基本行为。</li></ol><h3 id="1-2-WXML文件"><a href="#1-2-WXML文件" class="headerlink" title="1.2. WXML文件"></a>1.2. WXML文件</h3><ol><li>定义页面结构：在这个文件中，可以定义当前页面的结构信息，包括HTML标签、CSS样式、文本等。通过这个文件，可以控制页面的布局和显示效果。</li><li>绑定数据和事件：在这个文件中，可以绑定当前页面中所需要的数据和事件。通过这个文件，可以将页面的数据和业务逻辑与视图进行分离，提高代码的可维护性。</li><li>嵌套其他组件：在这个文件中，可以嵌套其他小程序组件，比如按钮、图片、表单等。通过这个文件，可以实现复杂的页面布局和交互效果。</li></ol><h3 id="1-3-WXSS文件"><a href="#1-3-WXSS文件" class="headerlink" title="1.3. WXSS文件"></a>1.3. WXSS文件</h3><ol><li>定义页面样式：在这个文件中，可以定义当前页面的样式信息，包括文字大小、颜色、背景色、边框、布局等。通过这个文件，可以控制页面的显示效果，使页面更加美观、易读。</li><li>支持继承和覆盖：在这个文件中，可以继承和覆盖其他样式，使样式表更加简洁和易于维护。</li><li>适配不同设备：在这个文件中，可以根据设备屏幕大小和分辨率等不同特点，制定不同的样式规则，使页面在不同设备上的显示效果更加一致和合适。</li></ol><h3 id="1-4-JavaScript文件"><a href="#1-4-JavaScript文件" class="headerlink" title="1.4. JavaScript文件"></a>1.4. JavaScript文件</h3><ol><li>控制页面行为：在这个文件中，可以编写当前页面的业务逻辑，包括数据的获取、处理、显示、提交等。通过这个文件，可以控制页面的行为，实现页面的动态效果和交互逻辑。</li><li>调用小程序API：在这个文件中，可以调用小程序提供的API接口，实现不同的功能和服务，比如获取用户信息、获取设备信息、调用微信支付等。</li><li>引入其他文件：在这个文件中，可以引入其他JavaScript文件、JSON文件、WXML文件和WXSS文件，以实现页面的复杂功能和逻辑。</li></ol><h2 id="2-小程序宿主环境"><a href="#2-小程序宿主环境" class="headerlink" title="2. 小程序宿主环境"></a>2. 小程序宿主环境</h2><p>小程序的运行环境分成渲染层和逻辑层，WXML 模板和 WXSS 样式工作在渲染层，JS 脚本工作在逻辑层。</p><h3 id="2-1-通信模型"><a href="#2-1-通信模型" class="headerlink" title="2.1. 通信模型"></a>2.1. 通信模型</h3><p>微信小程序的渲染层和逻辑层是分离的，它们之间通过微信客户端进行通信。该通信模型包含了三个部分：渲染层、逻辑层和微信客户端。</p><ol><li>渲染层：渲染层负责小程序的页面渲染，包括 WXML 模板的解析、样式的计算和渲染等。渲染层不涉及具体业务逻辑，只负责页面的展示。</li><li>逻辑层：逻辑层负责小程序的业务逻辑处理，包括数据的处理和交互行为的响应等。逻辑层与渲染层相对独立，可以通过数据绑定和事件等方式与渲染层进行通信。</li><li>微信客户端：通信模块负责实现渲染层和逻辑层之间的通信，包括事件的发送和接收、数据的传递等。</li></ol><p>在这个通信模型中，逻辑层可以通过 setData 方法向渲染层发送数据，渲染层可以通过 WXML 模板和 WXSS 样式表展示数据和样式，同时，渲染层也可以通过事件传递给逻辑层用户的交互行为。逻辑层可以通过事件监听函数响应这些事件，执行相应的业务逻辑处理。</p><img src="/2023/03/10/miniAPP-1/%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B.png" class="" title="通信模型图片"><h3 id="2-2-数据驱动"><a href="#2-2-数据驱动" class="headerlink" title="2.2. 数据驱动"></a>2.2. 数据驱动</h3><p>微信小程序采用的是数据驱动的开发模式，即通过数据来驱动页面的渲染和交互。其原理是通过数据绑定的方式将数据与页面元素进行关联，当数据发生变化时，页面会自动更新，从而实现了动态的页面渲染和交互。<br>而数据驱动的原理：WXML结构实际上等价于一棵Dom树，通过一个JS对象也可以来表达Dom树的结构，WXML可以先转成JS对象，然后再渲染出真正的Dom树。</p><img src="/2023/03/10/miniAPP-1/%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8-1.png" class="" title="转化图片"><ol><li>数据绑定：微信小程序支持数据绑定，即可以将数据与页面元素进行绑定，从而在数据发生变化时，自动更新页面。开发者可以通过在 WXML 模板中使用 <code>&#123;&#123; &#125;&#125;</code> 语法将数据绑定到页面元素上，比如将一个变量绑定到文本框的值上。</li><li>数据监听：微信小程序中的数据变化是通过数据监听来实现的，即当数据发生变化时，会触发相应的事件。开发者可以通过监听数据变化的事件来实现页面的动态更新。</li><li>数据更新：微信小程序的数据更新是自动的，当数据发生变化时，页面会自动更新，无需手动进行刷新。开发者只需要在逻辑层修改数据，页面就会自动更新。</li><li>双向绑定：微信小程序还支持双向绑定，即当页面元素的值发生变化时，会自动更新关联的数据。开发者可以通过使用双向绑定来简化代码的编写，提高开发效率。</li></ol><p>同时可以对比前后两个JS对象得到变化的部分，然后把这个差异应用到原来的Dom树上，从而达到快速更新UI的目的。</p><img src="/2023/03/10/miniAPP-1/%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8.png" class="" title="转化图片"><h3 id="2-3-页面渲染"><a href="#2-3-页面渲染" class="headerlink" title="2.3. 页面渲染"></a>2.3. 页面渲染</h3><p>上述的数据驱动可以知道小程序的页面渲染的流程。小程序的逻辑层和渲染层是分开的两个线程。在渲染层，宿主环境会把WXML转化成对应的JS对象，在逻辑层发生数据变更的时候，我们需要通过宿主环境提供的setData方法把数据从逻辑层传递到渲染层，再经过对比前后差异，把差异应用在原来的Dom树上，渲染出正确的UI界面。</p><img src="/2023/03/10/miniAPP-1/%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93.png" class="" title="渲染图片"><h2 id="3-小程序底层架构"><a href="#3-小程序底层架构" class="headerlink" title="3. 小程序底层架构"></a>3. 小程序底层架构</h2><p>上文所述：整个小程序系统构架分成两个部分：视图层(WebView) 和 逻辑层(App Service)，这两个部分分别由两个独立线程管理。</p><h3 id="3-1-通信原理"><a href="#3-1-通信原理" class="headerlink" title="3.1. 通信原理"></a>3.1. 通信原理</h3><h4 id="3-1-1-视图层"><a href="#3-1-1-视图层" class="headerlink" title="3.1.1. 视图层"></a>3.1.1. 视图层</h4><p>在微信小程序中，视图层与客户端之间的通信主要是通过 WeiXinJSBridge 这个兼容层来实现的。</p><p>当开发者插入一个原生组件时，组件运行的时候会被插入到 DOM 树中，同时也会调用客户端接口，通知客户端在哪个位置渲染原生界面。当开发者更新组件属性时，同样也会调用客户端提供的更新接口来更新原生界面的某些部分。</p><p>在 iOS 中，视图层与客户端的通信是利用 WKWebView 提供的 messageHandlers 特性来实现的。开发者可以通过调用 window.webkit.messageHandlers.方法名.postMessage(参数) 来向客户端发送消息，客户端可以通过设置 messageHandlers.方法名 的处理函数来接收并处理这些消息。</p><p>在安卓中，视图层与客户端的通信是通过往 WebView 的 window 对象注入一个原生方法来实现的。开发者可以通过调用 window.WeixinJSBridge.invoke(方法名, 参数, 回调函数) 来向客户端发送消息，客户端可以通过设置 WeixinJSBridge.on(‘方法名’, 处理函数) 来接收并处理这些消息。</p><p>无论是在 iOS 还是安卓中，WeiXinJSBridge 兼容层都起到了桥接视图层和客户端之间通信的作用。视图层只需要调用 WeiXinJSBridge 提供的接口，然后 WeiXinJSBridge 会将消息传递给客户端，并将客户端的处理结果再传递回视图层。这样就实现了视图层和客户端之间的通信。</p><h4 id="3-1-2-逻辑层"><a href="#3-1-2-逻辑层" class="headerlink" title="3.1.2. 逻辑层"></a>3.1.2. 逻辑层</h4><p>逻辑层与客户端原生通信机制与渲染层类似，不同在于，iOS平台可以往JavaScripCore框架注入一个全局的原生方法，而安卓方面则是跟渲染层一致的。</p><p>同样地，开发者也是间接地调用到与客户端原生通信的底层接口。一般我们会对逻辑层接口做层封装后才暴露给开发者，封装的细节可能是统一入参、做些参数校验、兼容各平台或版本问题等等。</p><h3 id="3-2-数据通信"><a href="#3-2-数据通信" class="headerlink" title="3.2. 数据通信"></a>3.2. 数据通信</h3><p>小程序是基于双线程模型，那就意味着任何数据传递都是线程间的通信，也就是都会有一定的延时。这不像传统Web那样，当界面需要更新时，通过调用更新接口UI就会同步地渲染出来。在小程序架构里，这一切都会变成异步。<br>异步会使得各部分的运行时序变得复杂一些。比如在渲染首屏的时候，逻辑层与渲染层会同时开始初始化工作，但是渲染层需要有逻辑层的数据才能把界面渲染出来，如果渲染层初始化工作较快完成，就要等逻辑层的指令才能进行下一步工作。因此逻辑层与渲染层需要有一定的机制保证时序正确，<br>在每个小程序页面的生命周期中，存在着若干次页面数据通信。逻辑层向视图层发送页面数据（data和setData的内容），视图层向逻辑层反馈用户事件。</p><img src="/2023/03/10/miniAPP-1/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1-%E5%8E%9F%E7%90%86.png" class="" title="数据通信"><h3 id="3-3-视图层渲染"><a href="#3-3-视图层渲染" class="headerlink" title="3.3. 视图层渲染"></a>3.3. 视图层渲染</h3><p>视图层在接收到初始数据（data）和更新数据（setData数据）时，需要进行视图层渲染。在一个页面的生命周期中，视图层会收到一份初始数据和多份更新数据。收到初始数据时需要执行初始渲染，每次收到更新数据时需要执行重渲染。</p><p>初始渲染发生在页面刚刚创建时。初始渲染时，将初始数据套用在对应的WXML片段上生成节点树。节点树也就是在开发者工具WXML面板中看到的页面树结构，它包含页面内所有组件节点的名称、属性值和事件回调函数等信息。最后根据节点树包含的各个节点，在界面上依次创建出各个组件。</p><p>初始渲染完毕后，视图层可以多次应用setData的数据。每次应用setData数据时，都会执行重渲染来更新界面。<br>初始渲染中得到的data和当前节点树会保留下来用于重渲染。每次重渲染时，将data和setData数据套用在WXML片段上，得到一个新节点树。然后将新节点树与当前节点树进行比较，这样可以得到哪些节点的哪些属性需要更新、哪些节点需要添加或移除。最后，将setData数据合并到data中，并用新节点树替换旧节点树，用于下一次重渲染。</p><img src="/2023/03/10/miniAPP-1/%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93.png" class="" title="视图渲染">]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Caddy简介与使用指南</title>
    <link href="/2023/03/07/caddy/"/>
    <url>/2023/03/07/caddy/</url>
    
    <content type="html"><![CDATA[<p>Caddy是一个快速、现代化且易于使用的Web服务器，它支持自动化的HTTPS，可轻松配置反向代理和静态文件服务等功能。Caddy是一款基于Go语言开发的服务器，适用于多种操作系统，包括Linux、Mac和Windows等。本文将介绍Caddy在Ubuntu下的安装及常用功能的使用指南。</p><p>官方文档： <a href="https://caddyserver.com/docs/">Caddy官方地址</a>。</p><h2 id="1-安装Caddy"><a href="#1-安装Caddy" class="headerlink" title="1. 安装Caddy"></a>1. 安装Caddy</h2><p><strong>Ubuntu安装</strong></p><pre><code class="hljs">sudo apt install -y debian-keyring debian-archive-keyring apt-transport-httpscurl -1sLf &#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&#39; | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpgcurl -1sLf &#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&#39; | sudo tee /etc/apt/sources.list.d/caddy-stable.listsudo apt updatesudo apt install caddy</code></pre><h2 id="2-Caddy的两种启动方式"><a href="#2-Caddy的两种启动方式" class="headerlink" title="2. Caddy的两种启动方式"></a>2. Caddy的两种启动方式</h2><p>Caddy有两种启动方式：使用JSON格式的配置文件和使用Caddyfile。下面将分别介绍它们的优缺点和使用方法。</p><h3 id="2-1-使用JSON格式的配置文件启动Caddy"><a href="#2-1-使用JSON格式的配置文件启动Caddy" class="headerlink" title="2.1 使用JSON格式的配置文件启动Caddy"></a>2.1 使用JSON格式的配置文件启动Caddy</h3><p>首先写一个Json文件，保存为caddy.json</p><pre><code class="hljs">    &#123;        &quot;apps&quot;: &#123;            &quot;http&quot;: &#123;                &quot;servers&quot;: &#123;                    &quot;example&quot;: &#123;                        &quot;listen&quot;: [&quot;:2015&quot;],                        &quot;routes&quot;: [                            &#123;                                &quot;handle&quot;: [&#123;                                    &quot;handler&quot;: &quot;static_response&quot;,                                    &quot;body&quot;: &quot;Hello, world!&quot;                                &#125;]                            &#125;                        ]                    &#125;                &#125;            &#125;        &#125;    &#125;</code></pre><p>上传json文件</p><pre><code class="hljs">    curl localhost:2019/load \    -H &quot;Content-Type: application/json&quot; \    -d @caddy.json</code></pre><p>使用JSON格式的配置文件的优点是灵活性高，可以通过配置文件实现更复杂的设置。缺点是配置文件语法相对复杂，需要一定的学习成本。</p><h3 id="2-2-使用Caddyfile启动Caddy"><a href="#2-2-使用Caddyfile启动Caddy" class="headerlink" title="2.2 使用Caddyfile启动Caddy"></a>2.2 使用Caddyfile启动Caddy</h3><p>使用Caddyfile启动Caddy非常简单，只需要在命令行中指定要监听的地址和要处理的站点即可。Caddyfile语法类似于Apache的配置文件，易于学习和使用。以下是一个简单的Caddyfile示例：</p><pre><code class="hljs">    :2015    respond &quot;Hello, world!&quot;</code></pre><p>启动caddy</p><pre><code class="hljs">    caddy run --config /path/to/Caddyfile</code></pre><h2 id="3-两种启动方式的优劣对比"><a href="#3-两种启动方式的优劣对比" class="headerlink" title="3. 两种启动方式的优劣对比"></a>3. 两种启动方式的优劣对比</h2><p>使用Caddyfile启动Caddy非常方便，语法简单易懂，适合快速设置和调试。而使用JSON格式的配置文件可以更好地处理复杂的设置，可以编写脚本自动生成配置文件等。</p><p>对于初学者来说，建议使用Caddyfile启动Caddy，等熟悉了Caddy的基本功能后再尝试使用JSON格式的配置文件。</p><img src="/2023/03/07/caddy/jsonVSfile.png" class="" title="对比图片"><h2 id="4-API和Config-files的配置"><a href="#4-API和Config-files的配置" class="headerlink" title="4. API和Config files的配置"></a>4. API和Config files的配置</h2><p>API方式通过HTTP请求实现配置更改，可以使用多种编程语言进行交互，并可以实时更改配置。使用API的优点是灵活性高，可以通过程序化方式自动化配置更改，但需要一定的编程知识。此外，API方式易于扩展和集成到自己的工作流中。</p><p>配置文件方式通过CLI命令实现配置更改，使用模板语言进行更高级的操作，如自动化证书管理、路由控制等。配置文件易于理解、共享和备份，可以方便地手动修改。但使用配置文件的缺点是不便于扩展和自动化管理，并且需要一定的命令行使用知识。</p><p>在选择API或配置文件方式时，需要考虑自己的工作流程和需求。API方式适合于需要高度灵活性和自动化管理的场景，而配置文件方式适合于手动管理、易于理解的场景。同时，也可以根据实际需求选择使用JSON或Caddyfile作为配置文件格式。</p><h2 id="5-Caddy反向代理的实现步骤"><a href="#5-Caddy反向代理的实现步骤" class="headerlink" title="5. Caddy反向代理的实现步骤"></a>5. Caddy反向代理的实现步骤</h2><p>Caddy支持反向代理功能，可以将请求转发到其他服务器或服务。以下是实现反向代理的步骤：</p><p>编写Caddyfile或JSON格式的配置文件，指定要反向代理的地址和要代理的站点。<br>启动Caddy，等待代理生效。比如下面的代码就将9000代理到2080。</p><pre><code class="hljs">caddy reverse-proxy --from :2080 --to :9000</code></pre><h2 id="6-Caddy实现HTTPS代理的步骤"><a href="#6-Caddy实现HTTPS代理的步骤" class="headerlink" title="6. Caddy实现HTTPS代理的步骤"></a>6. Caddy实现HTTPS代理的步骤</h2><p>简单的 HTTPS 反向代理命令，实现访问<a href="https://www.example.com/">https://www.example.com</a> -&gt; localhost:9000</p><pre><code class="hljs">caddy reverse-proxy --from example.com --to localhost:9000</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/02/hello-world/"/>
    <url>/2022/09/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><hr><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
